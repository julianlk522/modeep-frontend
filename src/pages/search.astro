---
import NoLinksFound from '../components/Rankings/NoLinksFound.astro'
import Rankings from '../components/Rankings/Rankings.astro'
import SearchFilters from '../components/SearchFilters/Filters'
import LocalStorageLoader from '../components/SearchFilters/LocalStorageLoader.astro'
import { CATS_ENDPOINT, CONTRIBUTORS_ENDPOINT, LINKS_ENDPOINT } from '../constants'
import WithFooter from '../layouts/WithFooter.astro'
import {
	Periods,
	SortMetrics,
	type CatCount,
	type Contributor,
	type PaginatedLinks,
	type Period,
	type SortMetric,
} from '../types'
import fetch_with_handle_redirect from '../util/fetch_with_handle_redirect'

// Auth
const token = Astro.cookies.get('token')?.value
const user = Astro.cookies.get('user')?.value

// Params
const params = Astro.url.searchParams
let cats = ''
if (params.get('cats')) {
	cats = params.get('cats') as string
}
let neutered_cats = ''
if (params.get('neutered')) {
	neutered_cats = params.get('neutered') as string
}
let summary_contains = ''
if (params.get('summary_contains')) {
	summary_contains = params.get('summary_contains') as string
}
let url_contains = ''
if (params.get('url_contains')) {
	url_contains = params.get('url_contains') as string
}
let url_lacks = ''
if (params.get('url_lacks')) {
	url_lacks = params.get('url_lacks') as string
}
let period: Period = 'all'
if (params.get('period') && (Periods as readonly string[]).includes(params.get('period') as Period)) {
	period = params.get('period') as Period
}
let sort_by: SortMetric = 'times_starred'
if (params.get('sort_by') && (SortMetrics as readonly string[]).includes(params.get('sort_by') as SortMetric)) {
	sort_by = params.get('sort_by') as SortMetric
}
let include_nsfw: boolean = false
if (params.get('include_nsfw') && params.get('include_nsfw') === 'true') {
	include_nsfw = true
}
let page = 1
if (params.get('page')) {
	page = parseInt(params.get('page') as string)
}

const url_params = {
	Cats: cats,
	NeuteredCats: neutered_cats,
	Period: period !== 'all' ? period : undefined,
	SortBy: sort_by !== 'times_starred' ? sort_by : undefined,
	IncludeNSFW: include_nsfw,
	SummaryContains: summary_contains,
	URLContains: url_contains,
	URLLacks: url_lacks,
	Page: page,
}

// Links
let links_url = LINKS_ENDPOINT
if (params.size) {
	links_url += `?${params.toString()}`
}

const get_links_resp = await (token
	? fetch_with_handle_redirect(links_url, {
			headers: { Authorization: `Bearer ${token}` },
		})
	: fetch_with_handle_redirect(links_url))
if (!get_links_resp.Response || get_links_resp.RedirectTo) {
	return Astro.redirect(get_links_resp.RedirectTo)
}
const data: PaginatedLinks = await get_links_resp.Response.json()
const { Links: links, NSFWLinksCount: nsfw_links_count, MergedCats: merged_cats } = data

if (!links?.length) {
	if (page > 1) {
		const redirect_url = new URL(Astro.url)
		redirect_url.searchParams.delete('page')
		return Astro.redirect(redirect_url)
	}
}

// Top Cats/Subcats
let top_cats: CatCount[] = []
let top_subcats: CatCount[] = []

const params_minus_page = new URLSearchParams()
for (const [key, value] of params.entries()) {
	if (key !== 'page') {
		params_minus_page.set(key, value)
	}
}
const cats_and_contributors_href_suffix = params_minus_page.size ? `?${params_minus_page.toString()}` : ''
let cats_url = CATS_ENDPOINT + cats_and_contributors_href_suffix
let contributors_url = CONTRIBUTORS_ENDPOINT + cats_and_contributors_href_suffix

if (cats) {
	const subcats_resp = await fetch_with_handle_redirect(cats_url)
	if (!subcats_resp.Response || subcats_resp.RedirectTo) {
		return Astro.redirect(subcats_resp.RedirectTo)
	}
	top_subcats = await subcats_resp.Response.json()
} else {
	const top_cats_resp = await fetch_with_handle_redirect(cats_url)
	if (!top_cats_resp.Response || top_cats_resp.RedirectTo) {
		return Astro.redirect(top_cats_resp.RedirectTo)
	}
	top_cats = await top_cats_resp.Response.json()
}

// Contributors
let top_contributors: Contributor[] = []

const contributors_resp = await fetch_with_handle_redirect(contributors_url)
if (!contributors_resp.Response || contributors_resp.RedirectTo) {
	return Astro.redirect(contributors_resp.RedirectTo)
}
top_contributors = await contributors_resp.Response.json()

// Page title
let page_title = 'Search'
if (cats) {
	const cats_split = cats ? cats.split(',') : []
	const has_many_cats = cats_split.length > 3
	const cats_title_text = has_many_cats ? cats_split.slice(0, 3).join(' + ') + '...' : cats_split.join(' + ')
	page_title = page_title += `: ${cats_title_text}`
}
---

<WithFooter Title={page_title}>
	<LocalStorageLoader />
	<main>
		<SearchFilters
			client:load
			InitialCats={cats.length ? cats.split(',') : []}
			InitialNeuteredCats={neutered_cats.length ? neutered_cats.split(',') : []}
			InitialPeriod={period}
			InitialSummaryContains={summary_contains}
			InitialURLContains={url_contains}
			InitialURLLacks={url_lacks}
			InitialSortBy={sort_by}
			InitialIncludeNSFW={include_nsfw}
			NSFWLinksCount={nsfw_links_count}
		/>

		{
			links && links.length ? (
				<Rankings
					Links={links}
					URLParams={url_params}
					Pages={data.Pages}
					TopCats={cats ? top_subcats : top_cats}
					TopContributors={top_contributors}
					MergedCats={merged_cats}
					Token={token}
					User={user}
				/>
			) : (
				<NoLinksFound AddSomethingPrompt />
			)
		}
	</main>
</WithFooter>
