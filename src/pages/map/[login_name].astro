---
import Rankings from '../../components/Rankings/Rankings.astro'
import ScrollUp from '../../components/ScrollUp.astro'
import SearchFilters from '../../components/SearchFilters/Filters'
import LocalStorageLoader from '../../components/SearchFilters/LocalStorageLoader.astro'
import Profile from '../../components/TmapProfile/Profile'
import { TMAP_ENDPOINT } from '../../constants'
import WithFooter from '../../layouts/WithFooter.astro'
import * as types from '../../types'
import fetch_with_handle_redirect from '../../util/fetch_with_handle_redirect'

// Auth
const token = Astro.cookies.get('token')?.value
const user = Astro.cookies.get('user')?.value

// Params
const { login_name } = Astro.params
if (!login_name) {
	return Astro.redirect('/')
}

const params = Astro.url.searchParams

let cats = ''
if (params.get('cats')) {
	cats = params.get('cats') ?? ''
}
let summary_contains = ''
if (params.get('summary_contains')) {
	summary_contains = params.get('summary_contains') ?? ''
}
let url_contains = ''
if (params.get('url_contains')) {
	url_contains = params.get('url_contains') ?? ''
}
let url_lacks = ''
if (params.get('url_lacks')) {
	url_lacks = params.get('url_lacks') ?? ''
}
let period = ''
if (params.get('period') && (types.Periods as readonly string[]).includes(params.get('period') as types.Period)) {
	period = params.get('period') as types.Period
}
let sort_by = ''
if (
	params.get('sort_by') &&
	(types.SortMetrics as readonly string[]).includes(params.get('sort_by') as types.SortMetric)
) {
	sort_by = params.get('sort_by') as types.SortMetric
}
let nsfw = false
if (params.get('nsfw') && params.get('nsfw') === 'true') {
	nsfw = true
}

const url_params = {
	Cats: cats,
	Period: (period as types.Period) ?? undefined,
	SortBy: (sort_by as types.SortMetric) ?? undefined,
	NSFW: nsfw,
	SummaryContains: summary_contains,
	URLContains: url_contains,
	URLLacks: url_lacks,
}

// Fetch Tmap
const href_suffix = params.size ? `?${params.toString()}` : ''
let tmap_url = TMAP_ENDPOINT + `/${login_name}` + href_suffix

const tmap_resp = token
	? await fetch_with_handle_redirect(tmap_url, {
			headers: {
				Authorization: `Bearer ${token}`,
			},
		})
	: await fetch_with_handle_redirect(tmap_url)
if (!tmap_resp.Response || tmap_resp.RedirectTo) {
	return Astro.redirect(tmap_resp.RedirectTo)
}
const tmap: types.TreasureMap | types.TreasureMapWithProfile = await tmap_resp.Response.json()

// Page title
let page_title = `${login_name}'s Treasure Map`

const cats_split: string[] = cats ? cats.split(',') : []
if (cats_split.length) {
	page_title += ' (Filtered)'
}


// Display about if used (unfiltered only)
let profile: types.Profile | undefined
if (!cats && tmap.hasOwnProperty('Profile')) {
	profile = (tmap as types.TreasureMapWithProfile).Profile
}
---

<WithFooter Title={page_title}>
	<LocalStorageLoader />
	<main>
		<h1 class={profile ? 'has-profile' : ''}>{login_name}</h1>

		{
			profile ? (
				<Profile
					client:idle
					LoginName={login_name}
					SignedInUser={user}
					CreatedAt={profile.CreatedAt}
					InitialPFPFileName={profile.PFP}
					InitialAboutText={profile.About}
					InitialEmailText={profile.Email}
					Token={token}
				/>
			) : null
		}

		<SearchFilters
			client:load
			Endpoint={'/map'}
			TmapOwnerLoginName={login_name}
			NSFWLinksCount={tmap.NSFWLinksCount}
			InitialCats={cats_split}
			InitialPeriod={period && period !== 'all' ? (period as types.Period) : 'all'}
			InitialSortBy={sort_by && sort_by !== 'times_starred' ? (sort_by as types.SortMetric) : 'times_starred'}
			InitialSummaryContains={summary_contains}
			InitialURLContains={url_contains}
			InitialURLLacks={url_lacks}
			InitialNSFW={nsfw}
		/>

		<Rankings
			Tmap={tmap}
			IsTmapFromUser={login_name}
			URLParams={url_params}
			TopCats={tmap.Cats}
			MergedCats={tmap.MergedCats ?? undefined}
			User={user}
			Token={token}
		/>

		<ScrollUp />
	</main>
</WithFooter>

<style>	
	h1 {
		text-align: left;
	}
	h1.has-profile {
		margin-bottom: 0;
	}

	p#profile-created {
		margin: 0.5rem 0 1rem;
	}

	#profile {
		padding-top: 0;

		astro-island:has(div#profile-pic) + pre {
			margin-top: 1rem;
		}
	}
</style>
