---
import Rankings from '../../../components/Rankings/Rankings.astro'
import ScrollUp from '../../../components/ScrollUp.astro'
import SearchFilters from '../../../components/SearchFilters/Filters'
import LocalStorageLoader from '../../../components/SearchFilters/LocalStorageLoader.astro'
import { TMAP_ENDPOINT } from '../../../constants'
import WithFooter from '../../../layouts/WithFooter.astro'
import {
	Periods,
	SortMetrics,
	tmap_sections,
	type Period,
	type SortMetric,
	type TreasureMapSection,
} from '../../../types'
import fetch_with_handle_redirect from '../../../util/fetch_with_handle_redirect'

// Auth
const token = Astro.cookies.get('token')?.value
const user = Astro.cookies.get('user')?.value

// Params
const { login_name } = Astro.params
if (!login_name) {
	return Astro.redirect('/')
}

// section
let section_name = Astro.params.section?.toLowerCase()
if (!section_name || !tmap_sections.map((s) => s.toLowerCase()).includes(section_name)) {
	return Astro.redirect(`/map/${login_name}`)
}

const params = Astro.url.searchParams

let cats = ''
if (params.get('cats')) {
	cats = params.get('cats') ?? ''
}
let summary_contains = ''
if (params.get('summary_contains')) {
	summary_contains = params.get('summary_contains') ?? ''
}
let url_contains = ''
if (params.get('url_contains')) {
	url_contains = params.get('url_contains') ?? ''
}
let url_lacks = ''
if (params.get('url_lacks')) {
	url_lacks = params.get('url_lacks') ?? ''
}
let period = ''
if (params.get('period') && (Periods as readonly string[]).includes(params.get('period') as Period)) {
	period = params.get('period') as Period
}
let sort_by = ''
if (params.get('sort_by') && (SortMetrics as readonly string[]).includes(params.get('sort_by') as SortMetric)) {
	sort_by = params.get('sort_by') as SortMetric
}
let include_nsfw: boolean = false
if (params.get('include_nsfw') && params.get('include_nsfw') === 'true') {
	include_nsfw = true
}
let page = 1
if (params.get('page')) {
	page = parseInt(params.get('page') as string)
}

const url_params = {
	Cats: cats,
	Period: period ? (period as Period) : undefined,
	SortBy: sort_by ? (sort_by as SortMetric) : undefined,
	IncludeNSFW: include_nsfw,
	SummaryContains: summary_contains,
	URLContains: url_contains,
	URLLacks: url_lacks,
	Page: page,
}

// Fetch tmap
const href_suffix = params.size ? `&${params.toString()}` : ''
const tmap_section_url = TMAP_ENDPOINT + `/${login_name}` + `?section=${section_name}` + href_suffix
const tmap_resp = token
	? await fetch_with_handle_redirect(tmap_section_url, {
			headers: {
				Authorization: `Bearer ${token}`,
			},
		})
	: await fetch_with_handle_redirect(tmap_section_url)
if (!tmap_resp.Response || tmap_resp.RedirectTo) {
	return Astro.redirect(tmap_resp.RedirectTo)
}
const section_data: TreasureMapSection = await tmap_resp.Response.json()
const single_tmap_section = section_data.Links
const merged_cats = section_data.MergedCats

// Page title
let page_title = `Treasure that ${login_name} ${section_name}`
const cats_split: string[] = cats ? cats.split(',') : []
if (cats_split.length) {
	const has_many_cats = cats_split.length > 3
	const cats_title_text = has_many_cats ? cats_split.slice(0, 3).join(' + ') + '...' : cats_split.join(' + ')
	page_title += ` about ${cats_title_text}`
}
---

<WithFooter Title={page_title}>
	<LocalStorageLoader />
	<main>
		<h1>{login_name}</h1>
		<p class='subtitle'>({section_name[0].toUpperCase() + section_name.slice(1)})</p>

		<a id='see-all-sections' href={Astro.url.href.replace(`/${section_name}`, '')}>
			<img src='../../back.svg' height={18} width={18} />
			All sections
		</a>

		<SearchFilters
			client:load
			Endpoint={'/map'}
			TmapOwnerLoginName={login_name}
			SingleTmapSectionName={section_name as (typeof tmap_sections)[number]}
			NSFWLinksCount={section_data.NSFWLinksCount}
			InitialCats={cats_split}
			InitialPeriod={(period as Period) ?? undefined}
			InitialSortBy={(sort_by as SortMetric) ?? undefined}
			InitialSummaryContains={summary_contains}
			InitialURLContains={url_contains}
			InitialURLLacks={url_lacks}
			InitialIncludeNSFW={include_nsfw}
		/>

		<Rankings
			SingleTmapSection={single_tmap_section}
			SingleTmapSectionName={section_name as (typeof tmap_sections)[number]}
			IsTmapFromUser={login_name}
			URLParams={url_params}
			TopCats={section_data.Cats}
			MergedCats={merged_cats ?? undefined}
			Pages={section_data.Pages}
			User={user}
			Token={token}
		/>

		<ScrollUp />
	</main>
</WithFooter>

<style>
	h1:has(+ .subtitle) {
		margin-bottom: 0.5rem;
	}

	p.subtitle {
		text-align: center;
	}

	a#see-all-sections {
		display: flex;
		align-items: center;
		gap: 5px;
		width: fit-content;
		margin-bottom: 1rem;
	}

	ol {
		max-width: calc(100% - 1rem);
		margin: 0;
		margin-top: 0.5rem;
		margin-left: auto;
		padding: 0;
	}
</style>
